// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`auth should resolve with true and valid userId for hardcoded token 1`] = `
"import { Vue, Component, Watch, Prop } from 'vue-property-decorator';
import { PasswordField, Test } from \\"~/components/login/fields/password-field.vue\\";
import Tooltip from \\"~/components/login/tooltip.vue\\";
@Component<ResetPasswordModal>({ components: { PasswordField, Tooltip } })
export default class ResetPasswordModal extends Vue {
    isOpen: boolean = this.$store.state.modals.isResetPasswordActive;
    newPassword: string = \\"\\";
    confirmedPassword: string = \\"\\";
    isFormValid: boolean = false;
    showServerTooltip: boolean = false;
    @Prop({
        type: Boolean, required: false, default: false
    })
    readonly loading!: boolean;
    @Prop({
        type: Object, required: true
    })
    readonly val!: Object;
    @Watch('$route')
    on$routeUpdate(newVal, oldVal: string) {
        this.foo = newVal;
    }
    @Watch('foo')
    onFooUpdate(newVal, oldVal: string) {
        this.foo = newVal;
    }
    async updatePassword(newPassword: string): Promise<void> {
        this.showServerTooltip = false;
        try {
            await this.$vrc().accounts().updateAccount({ password: newPassword });
            this.$store.commit(\\"user/SET_PROFILE_PROPERTY\\", { property: \\"password\\", newValue: newPassword });
            this.window = 1;
        }
        catch (error) {
            this.showServerTooltip = true;
            console.error(error);
        }
    }
    close(): void {
        this.$store.commit(\\"modals/SET_RESET_PASSWORD_ACTIVE\\", false);
        this.$router.replace({ path: \\"/\\" });
    }
    get arePasswordsEquals(): boolean {
        return this.newPassword === this.confirmedPassword;
    }
    set arePasswordsEquals(val) {
        return val;
    }
    get arePasswordsFilled(): boolean {
        return this.newPassword !== \\"\\" && this.confirmedPassword !== \\"\\";
    }
    created() {
        this.watcher = this.$store.watch(() => this.$store.state.modals.isResetPasswordActive, (newVal: boolean) => {
            this.isOpen = newVal;
        });
    }
    head() {
        return { meta: \\"test\\" };
    }
}
"
`;
